generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- Enums for better type safety ---
enum UserRole {
  client
  admin
}

enum BookingType {
  Consultation
  VenueVisit
  TastingSession
  WeddingEvent
  PackageBooking
  ServiceBooking
  Other
}

enum BookingStatus {
  Pending
  Confirmed
  CancelledByUser
  CancelledByAdmin
  Completed
  Rescheduled
  PaymentPending
}

// --- Models ---

model Booking {
  booking_id       Int           @id @default(autoincrement())
  user_id          Int
  service_id       Int?
  package_id       Int?
  booking_type     BookingType
  title            String        @db.VarChar(255)
  booking_datetime DateTime      // Native type DATETIME(0) or DATETIME
  location_type    String?       @db.VarChar(50)
  location_details String?       @db.VarChar(1024)
  status           BookingStatus @default(Pending)
  notes            String?       @db.Text
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  user    User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "bookings_ibfk_1")
  service Service? @relation(fields: [service_id], references: [service_id], onDelete: SetNull, map: "bookings_ibfk_2")
  package Package? @relation(fields: [package_id], references: [package_id], onDelete: SetNull, map: "bookings_ibfk_3")

  @@index([booking_datetime], map: "idx_booking_datetime")
  @@index([status], map: "idx_booking_status")
  @@index([user_id])
  @@index([package_id])
  @@index([service_id])
  @@map("bookings")
}

model BudgetCategory {
  category_id       Int               @id @default(autoincrement())
  name              String            @unique @db.VarChar(100)
  userBudgetEntries UserBudgetEntry[]
  // created_at        DateTime?         @default(now()) // Optional, if needed
  // updated_at        DateTime?         @updatedAt      // Optional, if needed

  @@map("budgetcategories")
}

model Event {
  event_id         Int      @id @default(autoincrement())
  name             String   @db.VarChar(255)
  event_datetime   DateTime // Native type DATETIME(0) or DATETIME
  location_name    String   @db.VarChar(255)
  location_address String?  @db.VarChar(1024)
  description      String?  @db.Text
  is_active        Boolean  @default(true) // Prisma prefers non-nullable for boolean with default
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  @@index([event_datetime], map: "idx_event_datetime")
  @@index([is_active], map: "idx_event_is_active")
  @@map("events")
}

model GalleryItem {
  item_id        Int       @id @default(autoincrement())
  image_url      String    @db.VarChar(1024)
  video_url      String?   @db.VarChar(1024)
  title          String?   @db.VarChar(255)
  description    String?   @db.Text
  collection_tag String?   @db.VarChar(100)
  category       String?   @db.VarChar(100)
  event_date     DateTime? @db.Date
  is_featured    Boolean   @default(false)
  is_active      Boolean   @default(true)
  uploaded_at    DateTime  @default(now()) @db.Timestamp(0) // Your original, keep if intended
  updated_at     DateTime? @updatedAt      // Add this if gallery items can be updated

  userSavedInspirations UserSavedInspiration[]

  @@index([category], map: "idx_gallery_category")
  @@index([event_date], map: "idx_gallery_event_date")
  @@index([is_active], map: "idx_gallery_is_active")
  @@index([is_featured], map: "idx_gallery_is_featured")
  @@map("galleryitems")
}

model HeroBanner {
  banner_id   Int      @id @default(autoincrement())
  image_url   String   @db.VarChar(1024)
  title       String?  @db.VarChar(255)
  subtitle    String?  @db.VarChar(500)
  button_text String?  @db.VarChar(100)
  button_link String?  @db.VarChar(1024)
  sort_order  Int      @default(0)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([is_active], map: "idx_herobanner_is_active")
  @@index([sort_order], map: "idx_herobanner_sort_order")
  @@map("herobanners")
}

model Package {
  package_id      Int      @id @default(autoincrement())
  name            String   @db.VarChar(255)
  description     String?  @db.Text
  price           Decimal  @db.Decimal(12, 2)
  cover_image_url String?  @db.VarChar(1024)
  is_popular      Boolean  @default(false)
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  bookings        Booking[]
  packageServices PackageService[]

  @@index([is_active], map: "idx_package_is_active")
  @@map("packages")
}

model PackageService {
  package_id Int
  service_id Int
  // created_at DateTime? @default(now()) // Optional for join tables

  package Package @relation(fields: [package_id], references: [package_id], onDelete: Cascade, map: "packageservices_ibfk_1")
  service Service @relation(fields: [service_id], references: [service_id], onDelete: Cascade, map: "packageservices_ibfk_2")

  @@id([package_id, service_id])
  @@index([service_id])
  @@map("packageservices")
}

model ServiceFeature {
  feature_id   Int    @id @default(autoincrement())
  service_id   Int
  feature_name String @db.VarChar(255)
  // created_at   DateTime? @default(now()) // Optional

  service Service @relation(fields: [service_id], references: [service_id], onDelete: Cascade, map: "servicefeatures_ibfk_1")

  @@index([service_id], map: "idx_feature_service_id")
  @@map("servicefeatures")
}

model Service {
  service_id      Int      @id @default(autoincrement())
  name            String   @db.VarChar(255)
  description     String?  @db.Text
  category        String?  @db.VarChar(100)
  base_price      Decimal? @db.Decimal(10, 2)
  cover_image_url String?  @db.VarChar(1024)
  icon_url        String?  @db.VarChar(1024)
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  bookings        Booking[]
  packageServices PackageService[]
  serviceFeatures ServiceFeature[]

  @@index([category], map: "idx_service_category")
  @@index([is_active], map: "idx_service_is_active")
  @@map("services")
}

model SpecialOffer {
  offer_id         Int       @id @default(autoincrement())
  title            String    @db.VarChar(255)
  description      String?   @db.Text
  icon_url         String?   @db.VarChar(1024)
  discount_details String?   @db.VarChar(255)
  valid_from       DateTime? @db.Date
  valid_until      DateTime? @db.Date
  is_active        Boolean   @default(true)
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  @@index([is_active], map: "idx_offer_is_active")
  @@index([valid_until], map: "idx_offer_valid_until")
  @@map("specialoffers")
}

model Testimonial {
  testimonial_id Int       @id @default(autoincrement())
  couple_name    String    @db.VarChar(255)
  photo_url      String?   @db.VarChar(1024)
  rating         Int
  quote          String    @db.Text
  wedding_date   DateTime? @db.Date
  is_approved    Boolean   @default(false)
  submitted_at   DateTime  @default(now()) @db.Timestamp(0) // Your original, keep if intended
  updated_at     DateTime? @updatedAt      // Add this if Admin can edit

  @@index([is_approved], map: "idx_testimonial_is_approved")
  @@map("testimonials")
}

model UserBudgetEntry {
  entry_id     Int      @id @default(autoincrement())
  user_id      Int
  category_id  Int
  spent_amount Decimal  @default(0.00) @db.Decimal(15, 2) // Made non-nullable with default
  notes        String?  @db.Text
  last_updated DateTime @updatedAt // Using @updatedAt will make Prisma manage this, no need for @db.Timestamp(0) unless specific
  // created_at   DateTime @default(now()) // Add if needed

  user           User           @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "userbudgetentries_ibfk_1")
  budgetCategory BudgetCategory @relation(fields: [category_id], references: [category_id], onDelete: Cascade, map: "userbudgetentries_ibfk_2")

  @@unique([user_id, category_id], map: "uk_user_category")
  @@index([category_id])
  @@map("userbudgetentries")
}

model User {
  user_id           Int       @id @default(autoincrement())
  username          String?   @unique @db.VarChar(100)
  email             String    @unique @db.VarChar(255)
  phone_number      String?   @unique @db.VarChar(20)
  password_hash     String    @db.VarChar(255)
  full_name         String?   @db.VarChar(255)
  avatar_url        String?   @db.VarChar(1024)
  user_role         UserRole  @default(client) // Made non-nullable with default
  wedding_date      DateTime? @db.Date
  planning_status   String?   @db.VarChar(100)
  phone_verified_at DateTime? @db.Timestamp(0) // Your original, keep if intended
  total_budget      Decimal?  @db.Decimal(15, 2)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  bookings              Booking[]
  userBudgetEntries     UserBudgetEntry[]
  userSavedInspirations UserSavedInspiration[]
  userTasks             UserTask[]

  @@index([email], map: "idx_user_email")
  @@index([phone_number], map: "idx_user_phone_number")
  @@map("users")
}

model UserSavedInspiration {
  user_id  Int
  item_id  Int
  saved_at DateTime @default(now()) @db.Timestamp(0) // Your original, keep if intended

  user        User        @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "usersavedinspirations_ibfk_1")
  galleryItem GalleryItem @relation(fields: [item_id], references: [item_id], onDelete: Cascade, map: "usersavedinspirations_ibfk_2")

  @@id([user_id, item_id])
  @@index([item_id])
  @@map("usersavedinspirations")
}

model UserTask {
  task_id         Int       @id @default(autoincrement())
  user_id         Int
  title           String    @db.VarChar(255)
  due_description String?   @db.VarChar(255)
  due_date        DateTime? @db.Date
  is_completed    Boolean   @default(false)
  notes           String?   @db.Text
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "usertasks_ibfk_1")

  @@index([due_date], map: "idx_usertask_due_date")
  @@index([is_completed], map: "idx_usertask_is_completed")
  @@index([user_id])
  @@map("usertasks")
}